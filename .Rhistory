diversity_order <-diversity(insects_order[,5:16])
insects_order$diversity <-diversity_order
#calculate order Evenness
evenness_order <-diversity_order/log(specnumber(insects_order[,5:16]))
insects_order$evenness <- evenness_order
#######
#Mixed effects models
library(lme4)
library(lmerTest) #to obtain p values
library (emmeans) #for pairwise comparisons
library (multcompView) #to view letters
library (car)
#order richness
#order richness
#AIC 559
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(richness.model_order)
Anova (richness.model_order)
#order abundance
##AIC 1530
abundance.model_order<-glmer(abundance ~ Trap + Date + (1 | Site:Replicate), data=insects_order, family = negative.binomial (4))
summary(abundance.model_order)
Anova(abundance.model_order)
#order diversity
##AIC 132
#Date is not significant
diversity.model_order<-lmer(diversity ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(diversity.model_order)
Anova(diversity.model_order)
#order evenness
##AIC -184
evenness.model_order<-lmer(evenness ~ Trap + Date + (1 | Site:Replicate), data=insects_order)
summary(evenness.model_order)
Anova(evenness.model_order)
pitfall <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_pitfall_functional.csv",na.strings = NULL)
ramp <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_yellowramp_functional.csv",na.strings = NULL)
jar <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_jarramp_functional.csv",na.strings = NULL)
sticky <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_stickycard_functional.csv",na.strings = NULL)
taxa <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Functional%20taxa.csv")
#add trap type as a column on each data file
pitfall$Trap="pitfall"
ramp$Trap="ramp"
jar$Trap="jar"
sticky$Trap="sticky"
#calculate mean and SE richness and abundance of each trap type
insects.abun <- rowSums(pitfall[,5:43])
pitfall$abundance <- insects.abun
insects.rowsums <- rowSums(pitfall[,5:43]>0)
pitfall$richness <- insects.rowsums
insects.abun <- rowSums(jar[,5:43])
jar$abundance <- insects.abun
insects.rowsums <- rowSums(jar[,5:43]>0)
jar$richness <- insects.rowsums
insects.abun <- rowSums(ramp[,5:43])
ramp$abundance <- insects.abun
insects.rowsums <- rowSums(ramp[,5:43]>0)
ramp$richness <- insects.rowsums
insects.abun <- rowSums(sticky[,5:43])
sticky$abundance <- insects.abun
insects.rowsums <- rowSums(sticky[,5:43]>0)
sticky$richness <- insects.rowsums
mean(pitfall$abundance) #14.82
sd(pitfall$abundance)/sqrt(10) #3.73
mean(pitfall$richness) #5.28
sd(pitfall$richness)/sqrt(10) #0.69
mean(jar$abundance) #26.17
sd(jar$abundance)/sqrt(10) #4.97
mean(jar$richness) #6.36
sd(jar$richness)/sqrt(10) #0.64
mean(ramp$abundance) #184.71
sd(ramp$abundance)/sqrt(10) #44.25
mean(ramp$richness) #12.76
sd(ramp$richness)/sqrt(10) #0.87
mean(sticky$abundance) #99.98
sd(sticky$abundance)/sqrt(10) #17.85
mean(sticky$richness) #9.29
sd(sticky$richness)/sqrt(10) #0.78
#combine data tables
library (plyr)
pitfallramp <- rbind.fill (pitfall, ramp)
pitfallrampjar <-rbind.fill (pitfallramp, jar)
insects <- rbind.fill (pitfallrampjar, sticky)
str(insects) #trap is listed as character
insects$Trap <- as.factor(insects$Trap)
str(insects) #now trap is listed as a factor
#############
#NMDS of insect community by functional classification between trap types
library (vegan)
#Create matrix of environmental variables
env.matrix<-insects[c(1:4,44)]
#create matrix of community variables
com.matrix<-insects[c(5:43)]
#ordination by NMDS
NMDS<-metaMDS(com.matrix, distance="bray", k=2, autotransform=FALSE, trymax=100)
NMDS
stressplot(NMDS)
#stress=0.15
#functional classification NMDS visualization
#what taxa to display using "taxa"
flying_func<-as.vector(t(taxa[1,]))
flying_func<-flying_func[-1]
crawling_func<-as.vector(t(taxa[2,]))
crawling_func<-crawling_func[-1]
intermediate_func<-as.vector(t(taxa[3,]))
intermediate_func<-intermediate_func[-1]
include_func<-as.vector(t(taxa[4,]))
include_func<-include_func[-1]
#plot functional NMDS
plot(NMDS, disp='sites', type="n")
title(main="Functional", adj = 0.01, line = -2, cex.main=2.5)
#add ellipsoids with ordiellipse
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
#display ground trap data as solid shapes - pitfall=circle, ramp trap=square, jar=triangle, flying trap as triangle outline
points(NMDS, display="sites", select=which(env.matrix$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS, display="sites", select=which(env.matrix$Trap=="jar"), pch=17, col="#009E73")
points(NMDS, display="sites", select=which(env.matrix$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS, display="sites", select=which(env.matrix$Trap=="sticky"), pch=25, col="#CC79A7")
#add legend
#legend(1.0,1.51, title=NULL, pch=c(19,17,15,25), col=c("#E69F00","#009E73","#F0E442","#CC79A7"), cex=.7, legend=c("Pitfall", "Jar ramp", "Yellow ramp", "Yellow sticky card"))
#add insect taxa as text
ordilabel(NMDS, display="species", select =which (include_func==TRUE & crawling_func == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & flying_func == TRUE), cex=0.6, col="white", fill="black")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & intermediate_func == TRUE), cex=0.6, col="black", fill="gray")
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix ~ Trap, data = env.matrix, permutations = 999, method="bray")
fit
#P-value = 0.001
#check assumption of homogeneity of multivariate dispersion
#P-value greater than 0.05 means assumption has been met
distances_data<-vegdist(com.matrix)
anova(betadisper(distances_data, env.matrix$Trap))
#P-value = .0001 -- cannot assume homogeneity of multivariate dispersion
################
#calculate Abundance
insects.abun <- rowSums(insects[,5:43])
insects$abundance <- insects.abun
#calculate Richness
insects.rowsums <- rowSums(insects[,5:43]>0)
insects$richness <- insects.rowsums
#calculate Shannon diversity
diversity <-diversity(insects[,5:43])
insects$diversity <-diversity
#calculate Evenness
evenness <-diversity/log(specnumber(insects[,5:43]))
insects$evenness <- evenness
#######
#Mixed effects models
library(lme4)
library(lmerTest) #to obtain p values
library (emmeans) #for pairwise comparisons
library (multcompView) #to view letters
library (car) #for Anova (which is needed because of negative binomial)
#richness
##AIC 721
richness.model<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects)
summary(richness.model)
Anova(richness.model)
#abundance
##AIC 1530
abundance.model<-glmer(abundance ~ Trap + Date + (1 | Site:Replicate), data=insects, family = negative.binomial(4.3))
summary(abundance.model)
Anova(abundance.model)
AIC(abundance.model)
#diversity
##AIC 157
#date is not significant
diversity.model<-lmer(diversity ~ Trap + (1 | Site:Replicate), data=insects)
summary(diversity.model)
Anova(diversity.model)
#evenness
##AIC -189
evenness.model<-lmer(evenness ~ Trap + (1 | Site:Replicate), data=insects)
summary(evenness.model)
Anova(evenness.model)
flying<-read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/flying.csv")
crawling<-read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/crawling.csv")
intermediate<-read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/intermediate.csv")
str(flying) #trap is listed as character
flying$Trap <- as.factor(flying$Trap)
str(flying) #now trap is listed as a factor
str(crawling) #trap is listed as character
crawling$Trap <- as.factor(crawling$Trap)
str(crawling) #now trap is listed as a factor
str(intermediate) #trap is listed as character
intermediate$Trap <- as.factor(intermediate$Trap)
str(intermediate) #now trap is listed as a factor
#calculating abundance for flying
flying.abun <- rowSums(flying[,2:23])
flying$abundance <- flying.abun
mean(flying$abundance) #43.18
sd(flying$abundance)/sqrt(10) #16.32
#calculating abundance for crawling
crawling.abun <- rowSums(crawling[,2:6])
crawling$abundance <- crawling.abun
mean(crawling$abundance) #18.4
sd(crawling$abundance)/sqrt(10) #8.14
#calculating abundance for intermediate
intermediate.abun <- rowSums(intermediate[,2:11])
intermediate$abundance <- intermediate.abun
mean(intermediate$abundance) #20.53
sd(intermediate$abundance)/sqrt(10) #15.94
#calculating richness for flying
flying.rich <- rowSums(flying[,2:23]>0)
flying$richness <- flying.rich
mean(flying$richness) #3.88
sd(flying$richness)/sqrt(10) #0.85
#calculating richness for crawling
crawling.rich <- rowSums(crawling[,2:6]>0)
crawling$richness <- crawling.rich
mean(crawling$richness) #2.65
sd(crawling$richness)/sqrt(10) #0.51
#calculating richness for intermediate
intermediate.rich <- rowSums(intermediate[,2:11]>0)
intermediate$richness <- intermediate.rich
mean(intermediate$richness) #1.68
sd(intermediate$richness)/sqrt(10) #0.32
#abundance model for flying arthropods
#AIC = 1260
abundance.model_flying<-glm(abundance ~ Trap, data=flying,family = negative.binomial(2.5))
summary(abundance.model_flying)
Anova(abundance.model_flying)
#abundance model for crawling arthropods
#AIC = 1073
abundance.model_crawling<-glm(abundance ~ Trap, data=crawling,family = negative.binomial(2))
summary(abundance.model_crawling)
Anova(abundance.model_crawling)
#abundance model for intermediate arthropods
#AIC = 1118
abundance.model_intermediate<-glm(abundance ~ Trap, data=intermediate, family = negative.binomial(0.9))
summary(abundance.model_intermediate)
Anova(abundance.model_intermediate)
#richness model for flying arthropods
#AIC = 591
richness.model_flying<-lm(richness ~ Trap, data=flying)
summary(richness.model_flying)
Anova(richness.model_flying)
#richness model for crawling arthropods
#AIC = 447
richness.model_crawling<-lm(richness ~ Trap, data=crawling)
summary(richness.model_crawling)
Anova(richness.model_crawling)
#richness model for intermediate arthropods
#AIC = 438
richness.model_intermediate<-lm(richness ~ Trap, data=intermediate)
summary(richness.model_intermediate)
Anova(richness.model_intermediate)
#pairwise comparison
abun_f.emm<-emmeans(abundance.model_flying,pairwise~Trap)
abun_f.emm
#pairwise comparison
abun_c.emm<-emmeans(abundance.model_crawling,pairwise~Trap)
abun_c.emm
#abundance model for intermediate arthropods
#AIC = 1118
abundance.model_intermediate<-glm(abundance ~ Trap, data=intermediate, family = negative.binomial(0.9))
summary(abundance.model_intermediate)
Anova(abundance.model_intermediate)
AIC(abundance.model_intermediate)
#pairwise comparison
abun_i.emm<-emmeans(abundance.model_intermediate,pairwise~Trap)
abun_i.emm
#richness model for flying arthropods
#AIC = 591
richness.model_flying<-lm(richness ~ Trap, data=flying)
summary(richness.model_flying)
Anova(richness.model_flying)
AIC(richness.model_flying)
#pairwise comparison
rich_f.emm<-emmeans(richness.model_flying,pairwise~Trap)
rich_f.emm
#pairwise comparison
rich_c.emm<-emmeans(richness.model_crawling,pairwise~Trap)
rich_c.emm
#pairwise comparison
rich_i.emm<-emmeans(richness.model_intermediate,pairwise~Trap)
rich_i.emm
#pairwise comparison
abun.emm_order<-emmeans(abundance.model_order,pairwise~Trap)
abun.emm_order
#pairwise comparison
abun.emm_order<-emmeans(abundance.model_order,pairwise~Trap)
abun.emm_order
#pairwise comparison
rich.emm_order<-emmeans(richness.model_order,pairwise~Trap)
rich.emm_order
#results: sig diff btw all
rich.cld_order<-multcomp::cld(rich.emm_order, alpha = 0.05, Letters = LETTERS)
rich.cld_order
#pairwise comparison
div.emm_order<-emmeans(diversity.model_order,pairwise~Trap)
div.emm_order
#pairwise comparison
even.emm_order<-emmeans(evenness.model_order,pairwise~Trap)
even.emm_order
#abundance
##AIC 1530
abundance.model<-glmer(abundance ~ Trap + Date + (1 | Site:Replicate), data=insects, family = negative.binomial(4.3))
summary(abundance.model)
Anova(abundance.model)
AIC(abundance.model)
#pairwise comparison
abun.emm<-emmeans(abundance.model,pairwise~Trap)
abun.emm
#richness
##AIC 721
richness.model<-lmer(richness ~ Trap + Date + (1 | Site:Replicate), data=insects)
summary(richness.model)
Anova(richness.model)
AIC(richness.model)
#pairwise comparison
rich.emm<-emmeans(richness.model,pairwise~Trap)
rich.emm
#results: jar-pitfall no sig diff (0.0594), sig dif btw all others
rich.cld<-multcomp::cld(rich.emm, alpha = 0.05, Letters = LETTERS)
rich.cld
#diversity
##AIC 157
#date is not significant
diversity.model<-lmer(diversity ~ Trap + (1 | Site:Replicate), data=insects)
summary(diversity.model)
Anova(diversity.model)
AIC(diversity.model)
#pairwise comparison
div.emm<-emmeans(diversity.model,pairwise~Trap)
div.emm
#pairwise comparison
even.emm<-emmeans(evenness.model,pairwise~Trap)
even.emm
pitfall_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_pitfall.csv",na.strings = NULL)
ramp_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_yellowramp.csv",na.strings = NULL)
jar_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_jarramp.csv",na.strings = NULL)
sticky_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_stickycard.csv",na.strings = NULL)
taxa_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/beetle%20taxa.csv")
#add trap type as a column on each data file
pitfall_beetle$Trap="pitfall"
ramp_beetle$Trap="ramp"
jar_beetle$Trap="jar"
sticky_beetle$Trap="sticky"
#combine beetle data tables
library (plyr)
pitfallramp_beetle <- rbind.fill (pitfall_beetle, ramp_beetle)
pitfallrampjar_beetle <-rbind.fill (pitfallramp_beetle, jar_beetle)
beetle <- rbind.fill (pitfallrampjar_beetle, sticky_beetle)
str(beetle) #trap is listed as character
beetle$Trap <- as.factor(beetle$Trap)
str(beetle) #now trap is listed as a factor
#############
#NMDS of beetle community between trap types
library (vegan)
#Create matrix of environmental variables
env.matrix_beetle<-beetle[c(1:3,19)]
#create matrix of community variables
com.matrix_beetle<-beetle[c(4:18)]
#ordination by NMDS
NMDS_beetle<-metaMDS(com.matrix_beetle, distance="bray", k=2, autotransform=TRUE, trymax=100)
NMDS_beetle
stressplot(NMDS_beetle)
#stress= "nearly zero" - 9.068076e-05 (changes each time)
#no convergence
#INSUFFICENT DATA
#beetle NMDS visualization
#what taxa to display using "taxa"
flying_beetle<-as.vector(t(taxa_beetle[1,]))
flying_beetle<-flying_beetle[-1]
crawling_beetle<-as.vector(t(taxa_beetle[2,]))
crawling_beetle<-crawling_beetle[-1]
intermediate_beetle<-as.vector(t(taxa_beetle[3,]))
intermediate_beetle<-intermediate_beetle[-1]
include_beetle<-as.vector(t(taxa_beetle[4,]))
include_beetle<-include_beetle[-1]
#plot beetle NMDS
plot(NMDS_beetle, disp='sites', type="n")
title(main="Focal taxa", adj = 0.01, line = -2, cex.main=2.5)
#add ellipsoids with ordiellipse
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
#display ground trap data as solid shapes - pitfall=circle, ramp trap=square, jar=triangle, flying trap as triangle outline
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="jar"), pch=17, col="#009E73")
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="sticky"), pch=25, col="#CC79A7")
#add legend
#legend(1.5,1.5, title=NULL, pch=c(19,17,15,25), col=c("#E69F00","#009E73","#F0E442","#CC79A7"), cex=.7, legend=c("Pitfall", "Jar ramp", "Yellow ramp", "Yellow sticky card"))
#add taxa as text
ordilabel(NMDS_beetle, display="species", select =which (include_beetle==TRUE & crawling_beetle == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS_beetle, display="species", select =which (include_beetle==TRUE & flying_beetle == TRUE), cex=0.6, col="white", fill="black")
ordilabel(NMDS_beetle, display="species", select =which (include_beetle==TRUE & intermediate_beetle == TRUE), cex=0.6, col="black", fill="grey")
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
#P-value = 0.003
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
#check assumption of homogeneity of multivariate dispersion
#P-value greater than 0.05 means assumption has been met
distances_data<-vegdist(com.matrix_beetle)
anova(betadisper(distances_data, env.matrix_beetle$Trap))
insects.abun_beetle <- rowSums(beetle[,4:18])
beetle$abundance <- insects.abun_beetle
#calculate beetle Richness
insects.rowsums_beetle <- rowSums(beetle[,4:18]>0)
beetle$richness <- insects.rowsums_beetle
#calculate beetle Shannon diversity
diversity_beetle <-diversity(beetle[,4:18])
beetle$diversity <-diversity_beetle
#calculate beetle Evenness
evenness_beetle <-diversity_beetle/log(specnumber(beetle[,4:18]))
beetle$evenness <- evenness_beetle
#######
#Mixed effects models
library(lme4)
library(lmerTest) #to obtain p values
library (emmeans) #for pairwise comparisons
library (multcompView) #to view letters
#beetle richness
##AIC 77 (69 w/o date)
richness.model_beetle<-lmer(richness ~ Trap + Date + (1 | Site), data=beetle)
summary(richness.model_beetle)
Anova(richness.model_beetle)
#pairwise comparison
abun.emm_beetle<-emmeans(abundance.model_beetle,pairwise~Trap)
abun.emm_beetle
#pairwise comparison
rich.emm_beetle<-emmeans(richness.model_beetle,pairwise~Trap)
rich.emm_beetle
#beetle abundance
##AIC 77 (69 w/o date)
abundance.model_beetle<-lmer(abundance ~ Trap + Date + (1 | Site), data=beetle)
summary(abundance.model_beetle)
Anova(abundance.model_beetle)
AIC(abundance.model_beetle)
#pairwise comparison
abun.emm_beetle<-emmeans(abundance.model_beetle,pairwise~Trap)
abun.emm_beetle
#beetle diversity
##AIC 53 (40 w/o date)
diversity.model_beetle<-lmer(diversity ~ Trap + Date + (1 | Site), data=beetle)
summary(diversity.model_beetle)
Anova(diversity.model_beetle)
#pairwise comparison
div.emm_beetle<-emmeans(diversity.model_beetle,pairwise~Trap)
div.emm_beetle
#beetle evenness
##AIC -193 (-411 w/o date)
evenness.model_beetle<-lmer(evenness ~ Trap + Date + (1 | Site), data=beetle)
summary(evenness.model_beetle)
Anova(evenness.model_beetle)
#pairwise comparison
even.emm_beetle<-emmeans(evenness.model_beetle,pairwise~Trap)
even.emm_beetle
#results:
even.cld_beetle<-multcomp::cld(even.emm_beetle, alpha = 0.05, Letters = LETTERS)
even.cld_beetle
#pairwise comparison
even.emm_beetle<-emmeans(evenness.model_beetle,pairwise~Trap)
even.emm_beetle
citation("car")
install.packages("devtools")
library(devtools)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(pairwiseAdonis)
citation("pairwiseAdonis")
install.packages("pairwiseAdonis")
pairwise.adonis(com.matrix_order, env.matrix_order$Trap)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(devtools)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
pairwise.adonis(com.matrix_order, env.matrix_order$Trap)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
force = TRUE
library(pairwiseAdonis)
citation("pairwiseAdonis")
pairwise.adonis(com.matrix_order, env.matrix_order$Trap)
pairwise.adonis(com.matrix, env.matrix$Trap)
pairwise.adonis(com.matrix_beetle, env.matrix_beetle$Trap)
citation("pairwiseAdonis")
#PERMANOVA -- testing for differences between the groups (traps)
fit<-adonis(com.matrix_order ~ Trap, data = env.matrix_order, permutations = 999, method="bray")
fit
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
#check assumption of homogeneity of multivariate dispersion
#P-value greater than 0.05 means assumption has been met
distances_data<-vegdist(com.matrix_beetle)
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
#ordination by NMDS
NMDS_beetle<-metaMDS(com.matrix_beetle, distance="bray", k=2, autotransform=TRUE, trymax=100)
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
pairwise.adonis(com.matrix_beetle, env.matrix_beetle$Trap)
#ordination by NMDS
NMDS_beetle<-metaMDS(com.matrix_beetle, distance="bray", k=2, autotransform=TRUE, trymax=100)
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
pairwise.adonis(com.matrix_beetle, env.matrix_beetle$Trap)
