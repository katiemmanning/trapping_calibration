include_order<-include_order[-1]
#plot order NMDS
plot(NMDS_order, disp='sites', type="n")
title(main="Order", adj = 0.01, line = -2, cex.main=2.5)
#add ellipsoids with ordiellipse
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS_order, env.matrix_order$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
#display ground trap data as solid shapes - pitfall=circle, ramp trap=square, jar=triangle, flying trap as triangle outline
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="jar"), pch=17, col="#009E73")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS_order, display="sites", select=which(env.matrix_order$Trap=="sticky"), pch=25, col="#CC79A7")
#add legend
legend(1.13,1.43, title=NULL, pch=c(19,17,15,25), col=c("#E69F00","#009E73","#F0E442","#CC79A7"), cex=.7, legend=c("Pitfall", "Jar ramp", "Yellow ramp", "Yellow sticky card"))
#add insect taxa as text
ordilabel(NMDS_order, display="species", select =which (include_order==TRUE & crawling_order == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS_order, display="species", select =which (include_order==TRUE & flying_order == TRUE), cex=0.6, col="white", fill="black")
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_order ~ Trap, data = env.matrix_order, permutations = 999, method="bray")
fit
#P-value = 0.001
#check assumption of homogeneity of multivariate dispersion
#P-value greater than 0.05 means assumption has been met
distances_data<-vegdist(com.matrix_order)
anova(betadisper(distances_data, env.matrix_order$Trap))
#P-value = 0.006 -- cannot assume homogeneity of multivariate dispersion
################
#calculate order Abundance
insects.abun_order <- rowSums(insects_order[,5:16])
insects_order$abundance <- insects.abun_order
#calculate order Richness
insects.rowsums_order <- rowSums(insects_order[,5:16]>0)
insects_order$richness <- insects.rowsums_order
#calculate order Shannon diversity
diversity_order <-diversity(insects_order[,5:16])
insects_order$diversity <-diversity_order
#calculate order Evenness
evenness_order <-diversity_order/log(specnumber(insects_order[,5:16]))
insects_order$evenness <- evenness_order
dotchart(insects_order$richness, main = "richness", group = insects_order$Trap) # way to visualize outliers
install.packages("lattice")
dotchart(insects_order$richness, main = "richness", group = insects_order$Trap) # way to visualize outliers
if (!suppressWarnings(require(nortest))) install.packages("nortest")
with(insects_order, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
# I believe bartlett.test is in the base stats package
with(insects_order, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
# this model investigates the effects of vacant lot planting treatment on ant species richness
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects_order)
summary(richness.model_order)
library(lme4)
library(lmerTest) #to obtain p values
library (emmeans) #for pairwise comparisons
library (multcompView)
richness.model_order<-lmer(richness ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects_order)
summary(richness.model_order)
anova(richness.model_order)
# Once you run the model, there are several ways to evaluate the model appropriateness
# I think these are the packages, let me know if something doesn't run
if (!suppressWarnings(require(bbmle))) install.packages("bbmle")
citation("bbmle")
if (!suppressWarnings(require(DHARMa))) install.packages("DHARMa")
citation("DHARMa")
plot(richness.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_order))
qqline(resid(richness.model_order))
plot(simulateResiduals(richness.model_order)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(richness.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_order)
influenceIndexPlot(richness.model_order, vars = c("Cook"), id = list(n = 3))
# check for outliers influencing the data
outlierTest(richness.model_order)
if (!suppressWarnings(require(DHARMa))) install.packages("DHARMa")
library(DHARMa)
#cannot find functions for the following code
densityPlot(rstudent(richness.model_order)) # check density estimate of the distribution of residuals
library(bbmle)
#cannot find functions for the following code
densityPlot(rstudent(richness.model_order)) # check density estimate of the distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_order))
qqline(resid(richness.model_order))
dotchart(insects_order$abundance, main = "richness", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
# I believe bartlett.test is in the base stats package
with(insects_order, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
abundance.model_order<-lmer(abundance ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects_order)
summary(abundance.model_order)
anova(abundance.model_order)
plot(abundance.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model_order))
qqline(resid(abundance.model_order))
plot(simulateResiduals(richness.model_order)) # another way to check for normailty and homogeneity of variance
plot(simulateResiduals(abundance.model_order)) # another way to check for normailty and homogeneity of variance
#cannot find functions for the following code
densityPlot(rstudent(abundance.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_order)
influenceIndexPlot(abundance.model_order, vars = c("Cook"), id = list(n = 3))
dotchart(insects_order$abundance, main = "abundance", group = insects_order$Trap) # way to visualize outliers
dotchart(insects_order$abundance, main = "abundance", group = insects_order$abundance) # way to visualize outliers
dotchart(insects_order$richness, main = "richness", group = insects_order$richness) # way to visualize outliers
dotchart(insects_order$abundance, main = "abundance", group = insects_order$abundance) # way to visualize outliers
dotchart(insects_order$abundance, main = "abundance", group = insects_order$Trap) # way to visualize outliers
dotchart(insects_order$richness, main = "richness", group = insects_order$Site) # way to visualize outliers
dotchart(insects_order$richness, main = "richness", group = insects_order$Trap) # way to visualize outliers
dotchart(insects_order$diversity, main = "diversity", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects_order, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
diversity.model_order<-lmer(diversity ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects_order)
summary(diversity.model_order)
anova(diversity.model_order)
plot(diversity.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model_order))
qqline(resid(diversity.model_order))
plot(simulateResiduals(diversity.model_order)) # another way to check for normailty and homogeneity of variance
# check for outliers influencing the data
outlierTest(diversity.model_order)
influenceIndexPlot(diversity.model_order, vars = c("Cook"), id = list(n = 3))
#cannot find functions for the following code
densityPlot(rstudent(diversity.model_order)) # check density estimate of the distribution of residuals
dotchart(insects_order$evenness, main = "evenness", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects_order, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
evenness.model_order<-lmer(evenness ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects_order)
summary(evenness.model_order)
anova(evenness.model_order)
plot(evenness.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model_order))
qqline(resid(evenness.model_order))
plot(simulateResiduals(evenness.model_order)) # another way to check for normailty and homogeneity of variance
#cannot find functions for the following code
densityPlot(rstudent(evenness.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model_order)
influenceIndexPlot(evenness.model_order, vars = c("Cook"), id = list(n = 3))
dotchart(insects_order$richness, main = "richness", group = insects_order$Trap) # way to visualize outliers
with(insects_order, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
# I believe bartlett.test is in the base stats package
with(insects_order, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
dotchart(insects_order$richness, main = "richness", group = insects$Trap) # way to visualize outliers
pitfall <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_pitfall_functional.csv",na.strings = NULL)
ramp <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_yellowramp_functional.csv",na.strings = NULL)
jar <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_jarramp_functional.csv",na.strings = NULL)
sticky <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Insect%20ID%202020_stickycard_functional.csv",na.strings = NULL)
taxa <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/Functional%20taxa.csv")
#add trap type as a column on each data file
pitfall$Trap="pitfall"
ramp$Trap="ramp"
jar$Trap="jar"
sticky$Trap="sticky"
#combine data tables
library (plyr)
pitfallramp <- rbind.fill (pitfall, ramp)
pitfallrampjar <-rbind.fill (pitfallramp, jar)
insects <- rbind.fill (pitfallrampjar, sticky)
#############
#NMDS of insect community by functional classification between trap types
library (vegan)
#Create matrix of environmental variables
env.matrix<-insects[c(1:4,44)]
#create matrix of community variables
com.matrix<-insects[c(5:43)]
#ordination by NMDS
NMDS<-metaMDS(com.matrix, distance="bray", k=2, autotransform=FALSE, trymax=100)
NMDS
stressplot(NMDS)
#stress=0.15
#functional classification NMDS visualization
#what taxa to display using "taxa"
flying_func<-as.vector(t(taxa[1,]))
flying_func<-flying_func[-1]
crawling_func<-as.vector(t(taxa[2,]))
crawling_func<-crawling_func[-1]
intermediate_func<-as.vector(t(taxa[3,]))
intermediate_func<-intermediate_func[-1]
include_func<-as.vector(t(taxa[4,]))
include_func<-include_func[-1]
#plot functional NMDS
plot(NMDS, disp='sites', type="n")
title(main="Functional", adj = 0.01, line = -2, cex.main=2.5)
#add ellipsoids with ordiellipse
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS, env.matrix$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
#display ground trap data as solid shapes - pitfall=circle, ramp trap=square, jar=triangle, flying trap as triangle outline
points(NMDS, display="sites", select=which(env.matrix$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS, display="sites", select=which(env.matrix$Trap=="jar"), pch=17, col="#009E73")
points(NMDS, display="sites", select=which(env.matrix$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS, display="sites", select=which(env.matrix$Trap=="sticky"), pch=25, col="#CC79A7")
#add legend
#legend(1.0,1.51, title=NULL, pch=c(19,17,15,25), col=c("#E69F00","#009E73","#F0E442","#CC79A7"), cex=.7, legend=c("Pitfall", "Jar ramp", "Yellow ramp", "Yellow sticky card"))
#add insect taxa as text
ordilabel(NMDS, display="species", select =which (include_func==TRUE & crawling_func == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & flying_func == TRUE), cex=0.6, col="white", fill="black")
ordilabel(NMDS, display="species", select =which (include_func==TRUE & intermediate_func == TRUE), cex=0.6, col="black", fill="gray")
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix ~ Trap, data = env.matrix, permutations = 999, method="bray")
fit
#P-value = 0.001
#check assumption of homogeneity of multivariate dispersion
#P-value greater than 0.05 means assumption has been met
distances_data<-vegdist(com.matrix)
anova(betadisper(distances_data, env.matrix$Trap))
#P-value = .0001 -- cannot assume homogeneity of multivariate dispersion
################
#calculate Abundance
insects.abun <- rowSums(insects[,5:43])
insects$abundance <- insects.abun
#calculate Richness
insects.rowsums <- rowSums(insects[,5:43]>0)
insects$richness <- insects.rowsums
#calculate Shannon diversity
diversity <-diversity(insects[,5:43])
insects$diversity <-diversity
#calculate Evenness
evenness <-diversity/log(specnumber(insects[,5:43]))
insects$evenness <- evenness
dotchart(insects_order$richness, main = "richness", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
plot(richness.model_order) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_order))
qqline(resid(richness.model_order))
plot(richness.model) # check distribution of residuals
richness.model<-lmer(richness ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects)
summary(richness.model)
anova(richness.model)
plot(richness.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model))
qqline(resid(richness.model))
plot(simulateResiduals(richness.model)) # another way to check for normailty and homogeneity of variance
# check for outliers influencing the data
outlierTest(richness.model)
influenceIndexPlot(richness.model, vars = c("Cook"), id = list(n = 3))
#cannot find functions for the following code
densityPlot(rstudent(richness.model)) # check density estimate of the distribution of residuals
if (!suppressWarnings(require(nortest))) install.packages("nortest")
citation("nortest")
if (!suppressWarnings(require(car))) install.packages("car")
citation("car")
if (!suppressWarnings(require(emmeans))) install.packages("emmeans")
citation("emmeans")
if (!suppressWarnings(require(bbmle))) install.packages("bbmle")
citation("bbmle")
if (!suppressWarnings(require(DHARMa))) install.packages("DHARMa")
citation("DHARMa")
if (!suppressWarnings(require(lme4))) install.packages("lme4")
citation("lme4")
if (!suppressWarnings(require(ggplot2))) install.packages("ggplot2")
citation("ggplot2")
if (!suppressWarnings(require(sjPlot))) install.packages("sjPlot")
citation("sjPlot")
if (!suppressWarnings(require(jtools))) install.packages("jtools")
citation("jtools")
if (!suppressWarnings(require(interactions))) install.packages("interactions")
plot(abundance.model_order) # check distribution of residuals
#cannot find functions for the following code
densityPlot(rstudent(abundance.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_order)
influenceIndexPlot(abundance.model_order, vars = c("Cook"), id = list(n = 3))
dotchart(insects_order$abundance, main = "abundance", group = insects_order$Trap) # way to visualize outliers
densityPlot(rstudent(richness.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_order)
influenceIndexPlot(richness.model_order, vars = c("Cook"), id = list(n = 3))
densityPlot(rstudent(abundance.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_order)
#unadjusted p-value = 9.5647e-05 Bonferroni p =  0.015782
influenceIndexPlot(abundance.model_order, vars = c("Cook"), id = list(n = 3))
# check for outliers influencing the data
outlierTest(richness.model_order)
influenceIndexPlot(richness.model_order, vars = c("Cook"), id = list(n = 3))
# check for outliers influencing the data
outlierTest(abundance.model_order)
influenceIndexPlot(abundance.model_order, vars = c("Cook"), id = list(n = 3))
densityPlot(rstudent(diversity.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model_order)
influenceIndexPlot(diversity.model_order, vars = c("Cook"), id = list(n = 3))
densityPlot(rstudent(evenness.model_order)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model_order)
influenceIndexPlot(evenness.model_order, vars = c("Cook"), id = list(n = 3))
densityPlot(rstudent(richness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model)
influenceIndexPlot(richness.model, vars = c("Cook"), id = list(n = 3))
with(insects, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
abundance.model<-lmer(abundance ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects)
summary(abundance.model)
anova(abundance.model)
plot(abundance.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model))
qqline(resid(abundance.model))
plot(simulateResiduals(abundance.model)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(abundance.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model)
influenceIndexPlot(abundance.model, vars = c("Cook"), id = list(n = 3))
# check for outliers influencing the data
outlierTest(abundance.model_order)
dotchart(insects$diversity, main = "diversity", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
diversity.model<-lmer(diversity ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects)
summary(diversity.model)
anova(diversity.model)
plot(diversity.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model))
qqline(resid(diversity.model))
plot(simulateResiduals(diversity.model)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(diversity.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model)
influenceIndexPlot(diversity.model, vars = c("Cook"), id = list(n = 3))
dotchart(insects$evenness, main = "evenness", group = insects$Trap) # way to visualize outliers
with(insects, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
evenness.model<-lmer(evenness ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects)
summary(evenness.model)
anova(evenness.model)
plot(diversity.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model))
qqline(resid(evenness.model))
plot(simulateResiduals(evenness.model)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(evenness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model)
influenceIndexPlot(evenness.model, vars = c("Cook"), id = list(n = 3))
pitfall_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_pitfall.csv",na.strings = NULL)
ramp_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_yellowramp.csv",na.strings = NULL)
jar_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_jarramp.csv",na.strings = NULL)
sticky_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/2020%20beetles_stickycard.csv",na.strings = NULL)
taxa_beetle <- read.csv("https://raw.githubusercontent.com/katiemmanning/trapping_calibration/main/Data/beetle%20taxa.csv")
#add trap type as a column on each data file
pitfall_beetle$Trap="pitfall"
ramp_beetle$Trap="ramp"
jar_beetle$Trap="jar"
sticky_beetle$Trap="sticky"
#combine beetle data tables
library (plyr)
pitfallramp_beetle <- rbind.fill (pitfall_beetle, ramp_beetle)
pitfallrampjar_beetle <-rbind.fill (pitfallramp_beetle, jar_beetle)
beetle <- rbind.fill (pitfallrampjar_beetle, sticky_beetle)
#############
#NMDS of beetle community between trap types
library (vegan)
#Create matrix of environmental variables
env.matrix_beetle<-beetle[c(1:3,19)]
#create matrix of community variables
com.matrix_beetle<-beetle[c(4:18)]
#ordination by NMDS
NMDS_beetle<-metaMDS(com.matrix_beetle, distance="bray", k=2, autotransform=TRUE, trymax=100)
NMDS_beetle
stressplot(NMDS_beetle)
#stress= "nearly zero" - 9.068076e-05 (changes each time)
#no convergence
#INSUFFICENT DATA
#beetle NMDS visualization
#what taxa to display using "taxa"
flying_beetle<-as.vector(t(taxa_beetle[1,]))
flying_beetle<-flying_beetle[-1]
crawling_beetle<-as.vector(t(taxa_beetle[2,]))
crawling_beetle<-crawling_beetle[-1]
intermediate_beetle<-as.vector(t(taxa_beetle[3,]))
intermediate_beetle<-intermediate_beetle[-1]
include_beetle<-as.vector(t(taxa_beetle[4,]))
include_beetle<-include_beetle[-1]
#plot beetle NMDS
plot(NMDS_beetle, disp='sites', type="n")
title(main="Focal taxa", adj = 0.01, line = -2, cex.main=2.5)
#add ellipsoids with ordiellipse
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#F0E442",kind="sd", conf=0.95, label=FALSE, show.groups = "ramp")
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#CC79A7",kind="sd", conf=0.95, label=FALSE, show.groups = "sticky")
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#E69F00",kind="sd", conf=0.95, label=FALSE, show.groups = "pitfall")
ordiellipse(NMDS_beetle, env.matrix_beetle$Trap, draw="polygon", col="#009E73",kind="sd", conf=0.95, label=FALSE, show.groups = "jar")
#display ground trap data as solid shapes - pitfall=circle, ramp trap=square, jar=triangle, flying trap as triangle outline
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="pitfall"),pch=19, col="#E69F00")
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="jar"), pch=17, col="#009E73")
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="ramp"), pch=15, col="#F0E442")
points(NMDS_beetle, display="sites", select=which(env.matrix_beetle$Trap=="sticky"), pch=25, col="#CC79A7")
#add legend
#legend(1.5,1.5, title=NULL, pch=c(19,17,15,25), col=c("#E69F00","#009E73","#F0E442","#CC79A7"), cex=.7, legend=c("Pitfall", "Jar ramp", "Yellow ramp", "Yellow sticky card"))
#add taxa as text
ordilabel(NMDS_beetle, display="species", select =which (include_beetle==TRUE & crawling_beetle == TRUE), cex=0.6, col="black", fill="white")
ordilabel(NMDS_beetle, display="species", select =which (include_beetle==TRUE & flying_beetle == TRUE), cex=0.6, col="white", fill="black")
ordilabel(NMDS_beetle, display="species", select =which (include_beetle==TRUE & intermediate_beetle == TRUE), cex=0.6, col="black", fill="grey")
#bootstrapping and testing for differences between the groups (traps)
fit<-adonis(com.matrix_beetle ~ Trap, data = env.matrix_beetle, permutations = 999, method="bray")
fit
#P-value = 0.003
#check assumption of homogeneity of multivariate dispersion
#P-value greater than 0.05 means assumption has been met
distances_data<-vegdist(com.matrix_beetle)
anova(betadisper(distances_data, env.matrix_beetle$Trap))
#P-value = 0.7987 --- assumes homogeneity
################
#calculate beetle Abundance
insects.abun_beetle <- rowSums(beetle[,4:18])
beetle$abundance <- insects.abun_beetle
#calculate beetle Richness
insects.rowsums_beetle <- rowSums(beetle[,4:18]>0)
beetle$richness <- insects.rowsums_beetle
#calculate beetle Shannon diversity
diversity_beetle <-diversity(beetle[,4:18])
beetle$diversity <-diversity_beetle
#calculate beetle Evenness
evenness_beetle <-diversity_beetle/log(specnumber(beetle[,4:18]))
beetle$evenness <- evenness_beetle
with(beetle, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(beetle, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
richness.model_beetle<-lmer(richness ~ Trap + Date + (1 | Site), data=beetle)
summary(richness.model_beetle)
anova(richness.model_beetle)
plot(richness.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model_beetle))
qqline(resid(richness.model_beetle))
plot(simulateResiduals(richness.model_beetle)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(richness.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model_beetle)
influenceIndexPlot(richness.model_beetle, vars = c("Cook"), id = list(n = 3))
with(beetle, ad.test(abundance)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(beetle, bartlett.test(abundance ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
abundance.model_beetle<-lmer(abundance ~ Trap + Date + (1 | Site), data=beetle)
summary(abundance.model_beetle)
anova(abundance.model_beetle)
plot(abundance.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(abundance.model_beetle))
qqline(resid(abundance.model_beetle))
plot(simulateResiduals(abundance.model_beetle)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(abundance.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(abundance.model_beetle)
influenceIndexPlot(abundance.model_beetle, vars = c("Cook"), id = list(n = 3))
with(beetle, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(beetle, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
diversity.model_beetle<-lmer(diversity ~ Trap + Date + (1 | Site), data=beetle)
summary(diversity.model_beetle)
anova(diversity.model_beetle)
plot(diversity.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(diversity.model_beetle))
qqline(resid(diversity.model_beetle))
plot(simulateResiduals(diversity.model_beetle)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(diversity.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model_beetle)
influenceIndexPlot(diversity.model_beetle, vars = c("Cook"), id = list(n = 3))
with(beetle, ad.test(evenness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(beetle, bartlett.test(evenness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
evenness.model_beetle<-lmer(evenness ~ Trap + Date + (1 | Site), data=beetle)
summary(evenness.model_beetle)
anova(evenness.model_beetle)
plot(evenness.model_beetle) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(evenness.model_beetle))
qqline(resid(evenness.model_beetle))
plot(simulateResiduals(evenness.model_beetle)) # another way to check for normailty and homogeneity of variance
plot(simulateResiduals(evenness.model_beetle)) # another way to check for normailty and homogeneity of variance
densityPlot(rstudent(evenness.model_beetle)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model_beetle)
influenceIndexPlot(evenness.model_beetle, vars = c("Cook"), id = list(n = 3))
with(insects, ad.test(richness)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
#p-value = 0.0001176
with(insects, bartlett.test(richness ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
#p-value = 0.2123
richness.model<-lmer(richness ~ Trap + Date + (1 | Site) + (1 | Site:Replicate), data=insects)
summary(richness.model)
anova(richness.model)
plot(richness.model) # check distribution of residuals
# check normality with these figures, are there outliers at either end
qqnorm(resid(richness.model))
qqline(resid(richness.model))
plot(simulateResiduals(richness.model)) # another way to check for normailty and homogeneity of variance
#KS test: p = 0.24934
#dispersion test: p = 0.968
#outlier test: p = 0.37883
#no significant problems detected btw residual and predicted
densityPlot(rstudent(richness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(richness.model)
influenceIndexPlot(richness.model, vars = c("Cook"), id = list(n = 3))
with(insects, ad.test(diversity)) #Anderson-darling test for normality (good for small sample sizes), low p-value means assumption is violated
with(insects, bartlett.test(diversity ~ Trap)) #Bartlett test for homogeneity of variance, low p-value means assumption is violated
densityPlot(rstudent(diversity.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(diversity.model)
influenceIndexPlot(diversity.model, vars = c("Cook"), id = list(n = 3))
densityPlot(rstudent(evenness.model)) # check density estimate of the distribution of residuals
# check for outliers influencing the data
outlierTest(evenness.model)
influenceIndexPlot(evenness.model, vars = c("Cook"), id = list(n = 3))
